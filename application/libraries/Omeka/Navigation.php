<?php
/**
 * @copyright Roy Rosenzweig Center for History and New Media, 2007-2010
 * @license http://www.gnu.org/licenses/gpl-3.0.txt
 * @package Omeka
 */

/**
 * Customized subclass of Zend Framework's Zend_Navigation class.
 *
 *
 * @package Omeka
 * @copyright Roy Rosenzweig Center for History and New Media, 2007-2010
 */
class Omeka_Navigation extends Zend_Navigation
{       
    /**
     * Creates a new navigation container
     *
     * @param array|Zend_Config $pages    [optional] pages to add
     * @throws Zend_Navigation_Exception  if $pages is invalid
     */
    public function __construct($pages = null)
    {
        parent::__construct($pages);
    }
    
    /**
     * Saves the navigation in the global options table.
     *
     * @param String $optionName    The name of the option
     */
    public function saveAsOption($optionName) 
    {
        set_option($optionName, json_encode($this->toArray()));
    }
    
    /**
     * Loads the navigation from the global options table
     *
     * @param String $optionName    The name of the option
     */
    public function loadAsOption($optionName) 
    {
        if ($navPages = json_decode(get_option($optionName), true)) {
            $this->setPages($navPages);
        }
    }
    
    /**
     * Adds a pages generated by Omeka plugins and other contributors to the 'public_navigation_main' filter
     * The 'public_navigation_main' filter pulls in an associative array where the key is a link label and the value
     * is either a uri, Omeka_Navigation_Page_Uri, Zend_Navigation_Page_Uri, or Zend_Navigation_Page_Mvc.  Before
     * adding the values to this navigation object, will normalize and convert all values to either an
     * Omeka_Navigation_Page_Uri or a Zend_Navigation_Page_Mvc.  If the associated uri of any page is invalid, it
     * will not add that page to the navigation. 
     * Also, it removes expired pages from formerly active plugins and other former handlers of the
     * 'public_navigation_main' filter.
     * 
     */
    public function addPagesFromFilters() 
    {   
        // add the standard Browse Items and Browse Collections links to the main nav
        set_theme_base_uri('public');     
        $pageLinks = array(
            __('Browse Items') => abs_uri('items'), 
            __('Browse Collections') => abs_uri('collections')
        );
        revert_theme_base_uri();
        
        // gather other main nav links from filter handlers (e.g. plugins)      
        $pageLinks = apply_filters('public_navigation_main', $pageLinks);        
                        
        // validate and normalize pages from filter handlers (e.g. plugins)
        $pageUids = array();
        foreach($pageLinks as $label => $uriOrPage) {
            
            // normalize the page and if the page is valid, add it to the navigation
            if ($nPage = $this->_normalizePage($uriOrPage)) {
                $nPage->setLabel($label); // set the label of the navigation link
                                
                // if the navigation does not have the page, then add it
                $sPage = $this->getPageByUid($this->createPageUid($nPage));
                if ($sPage === null) {                    
                    // initialize the page with settings for pages that come from filters.
                    $nPage->setVisible(false); // by default, make the navigation link not visible
                    $nPage->can_delete = false; // make sure the user cannot manually delete the navigation link
                    $sPage = $this->addOrUpdatePage($nPage); // add the new page
                }
                
                $pageUids[] = $sPage->uid; // gather the uids of pages offered by filters
            }
        }
                
        // remove old pages that cannot be deleted and which are not provided by plugins or other filter handlers
        $expiredPages = array();
        foreach($this as $page) {
            if (!$page->can_delete && !in_array($page->uid, $pageUids)) {
                $expiredPages[] = $page;
            }
        }
        foreach($expiredPages as $expiredPage) {
            $this->removePage($expiredPage);
        }       
    }
    
    /**
     * Normalizes the uri or navigation page object into either a Omeka_Navigation_Page_Uri 
     * or Zend_Navigation_Page_Mvc object.  If it cannot be normalized, it returns null.
     *
     * @param String|Omeka_Navigation_Page_Uri|Zend_Navigation_Page_Uri|Zend_Navigation_Page_Mvc|Zend_Uri_Http $uriOrPage    The name of the option
     * @return Omeka_Navigation_Page_Uri|Zend_Navigation_Page_Mvc|null 
     */
    private function _normalizePage($uriOrPage)
    {
        $nPage = null;
        if ($uriOrPage instanceof Zend_Navigation_Page_Mvc) {
            /* ToDo:  how do we validate these mvc pages? */
            $nPage = $uriOrPage;
        } elseif ($uriOrPage instanceof Omeka_Navigation_Page_Uri) {
            if ($nUri = $this->_normalizeHref($uriOrPage->getHref())) {
                $nPage = $uriOrPage;
                $nPage->setUri($nUri->getUri());
                if ($nUri->getFragment() !== false) {
                    $nPage->setFragment($nUri->getFragment());
                }                    
            }
        } elseif (is_string($uriOrPage)) {
            if ($nUri = $this->_normalizeHref($uriOrPage)) {                
                $nPage = new Omeka_Navigation_Page_Uri();
                $nPage->setUri($nUri->getUri());                    
                if ($nUri->getFragment() !== false) {
                    $nPage->setFragment($nUri->getFragment());
                }
            }
        } elseif ($uriOrPage instanceof Zend_Navigation_Page_Uri) {
            // convert a Zend_Navigation_Page_Uri to an Omeka_Navigation_Page_Uri
            if ($nUri = $this->_normalizeHref($uriOrPage->getHref())) {
                $nPage = new Omeka_Navigation_Page_Uri();
                $nPage->setUri($nUri->getUri());
                if ($nUri->getFragment() !== false) {
                    $nPage->setFragment($nUri->getFragment());
                }
                // copy information from Zend_Navigation_Page_Uri into Omeka_Navigation_Page_Uri
                // note: we may need to update this list
                $nPage->setVisible($uriOrPage->getVisible());
                $nPage->setOrder($uriOrPage->getOrder()); 
                $nPage->setLabel($uriOrPage->getLabel());
                $nPage->can_delete = $uriOrPage->can_delete;
                $nPage->uid = $uriOrPage->uid;
            }               
        } elseif ($uriOrPage instanceof Zend_Uri_Http) {
            if ($uriOrPage->valid()) {
                $nPage = new Omeka_Navigation_Page_Uri();
                $nPage->setUri($uriOrPage->getUri());
                if ($uriOrPage->getFragment() !== false) {
                    $nPage->setFragment($uriOrPage->getFragment());
                }
            }
        }
        return $nPage;
    }
    
    /**
     * Normalizes a string href for a navigation page and returns a Zend_Uri_Http object. 
     * If the $href is a path from either the admin base url or public base url, 
     * then convert it to a valid uri for this Omeka site.
     * If $href is an invalid uri, then return null.  
     *
     * @param String $href
     * @return Zend_Uri_Http|null
     */
    private function _normalizeHref($href) 
    {        
        if ($href !== null) {
            // if href is a relative path, then prepend it with WEB_ROOT
            if (strlen($href) && $href[0] == '/') {
                if (strpos($href, ADMIN_BASE_URL) === 0) {
                    // normalize an admin page like 'http://{domain}/{base_dir}/admin/items/browse'
                    $href = WEB_ROOT . '/admin' . str_replace(ADMIN_BASE_URL, '', $href);
                } elseif (strpos($href, PUBLIC_BASE_URL) === 0) {
                    // normalize an public page like 'http://{domain}/{base_dir}/items/browse'
                    $href = WEB_ROOT . str_replace(PUBLIC_BASE_URL, '', $href);
                }
            }
            try {
                $uri = Zend_Uri::factory($href);
                if ($uri->valid()) {
                    return $uri;
                }
            } catch (Zend_Uri_Exception $e) {
            }
        }
        return null;
    }
       
    /**
     * Adds a page to the navigation if it does not already exist, or updates it. 
     * It uses to the uid of the page to determine if it exists.
     * Returns true if the page was added, otherwise returns false.
     *
     * @param Omeka_Navigation_Page_Uri|Zend_Navigation_Page_Mvc $page
     * @return Zend_Navigation_Page|null
     */
    public function addOrUpdatePage(Zend_Navigation_Page $page)
    {
        // The navigation object is assumed to only contain
        // either Zend_Navigation_Page_Mvc or Omeka_Navigaton_Page_Uri objects
        if ($nPage = $this->_normalizePage($page)) {
            // only add the page to the navigation if it does not already exist in the navigation 
            // according to its unique id.  otherwise, update date it
            $pageUid = $this->createPageUid($nPage);
            if ($fPage = $this->findOneBy('uid', $pageUid)) {
                $fPage->setVisible($nPage->getVisible()); // update the visibility            
                $fPage->setOrder($nPage->getOrder());
                $fPage->can_delete = $nPage->can_delete;
                return $fPage;
            } else {
                $nPage->uid = $this->createPageUid($nPage); // create a new uid for the page
                $this->addPage($nPage); // add the page to the navigation
                return $nPage;
             }
        }
        return null;
    }
    
    /**
     * Returns the navigation page associated with uid.  If not page is associated, then it returns null.
     *
     * @param String $pageUid The uid of the page
     * @return Omeka_Zend_Navigation_Page_Uri|Zend_Navigation_Page_Mvc|null
     */
    public function getPageByUid($pageUid)
    {
        if ($page = $this->findOneBy('uid', $pageUid)) {
            return $page;
        }
        return null;
    }
    
    /**
     * Returns the unique id for the page, which can be used to determine whether it can be added to the navigaton
     * It is based on the href (and not just the uri) because the href has the fragment included.
     * It is also based on the label of the link.
     *
     * @param Zend_Navigation_Page $page
     * @return String
     */
    public function createPageUid(Zend_Navigation_Page $page) 
    {
        return $page->getHref() . '|' . $page->getLabel();
    }
}